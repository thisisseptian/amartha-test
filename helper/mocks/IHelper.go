// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "amartha-test/model"

	mock "github.com/stretchr/testify/mock"
)

// IHelper is an autogenerated mock type for the IHelper type
type IHelper struct {
	mock.Mock
}

// CheckAgreementCompletelySignedByLender provides a mock function with given fields: loan
func (_m *IHelper) CheckAgreementCompletelySignedByLender(loan model.Loan) (bool, error) {
	ret := _m.Called(loan)

	if len(ret) == 0 {
		panic("no return value specified for CheckAgreementCompletelySignedByLender")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Loan) (bool, error)); ok {
		return rf(loan)
	}
	if rf, ok := ret.Get(0).(func(model.Loan) bool); ok {
		r0 = rf(loan)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(model.Loan) error); ok {
		r1 = rf(loan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateBorrowerAgreementPDF provides a mock function with given fields: loan
func (_m *IHelper) GenerateBorrowerAgreementPDF(loan *model.Loan) error {
	ret := _m.Called(loan)

	if len(ret) == 0 {
		panic("no return value specified for GenerateBorrowerAgreementPDF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Loan) error); ok {
		r0 = rf(loan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateIncrementalAgreementID provides a mock function with given fields:
func (_m *IHelper) GenerateIncrementalAgreementID() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateIncrementalAgreementID")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GenerateIncrementalLoanID provides a mock function with given fields:
func (_m *IHelper) GenerateIncrementalLoanID() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateIncrementalLoanID")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GenerateIncrementalUserID provides a mock function with given fields:
func (_m *IHelper) GenerateIncrementalUserID() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateIncrementalUserID")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GenerateLenderAgreementPDF provides a mock function with given fields: loan
func (_m *IHelper) GenerateLenderAgreementPDF(loan *model.Loan) error {
	ret := _m.Called(loan)

	if len(ret) == 0 {
		panic("no return value specified for GenerateLenderAgreementPDF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Loan) error); ok {
		r0 = rf(loan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateSignedAgreementPDF provides a mock function with given fields: loan, userID
func (_m *IHelper) GenerateSignedAgreementPDF(loan *model.Loan, userID int64) error {
	ret := _m.Called(loan, userID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSignedAgreementPDF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Loan, int64) error); ok {
		r0 = rf(loan, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAgreementByAgreementID provides a mock function with given fields: agreementID
func (_m *IHelper) GetAgreementByAgreementID(agreementID int64) model.Aggrement {
	ret := _m.Called(agreementID)

	if len(ret) == 0 {
		panic("no return value specified for GetAgreementByAgreementID")
	}

	var r0 model.Aggrement
	if rf, ok := ret.Get(0).(func(int64) model.Aggrement); ok {
		r0 = rf(agreementID)
	} else {
		r0 = ret.Get(0).(model.Aggrement)
	}

	return r0
}

// GetAgreementIDByAgreementURL provides a mock function with given fields: url
func (_m *IHelper) GetAgreementIDByAgreementURL(url string) (int64, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetAgreementIDByAgreementURL")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgreements provides a mock function with given fields:
func (_m *IHelper) GetAgreements() []model.Aggrement {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAgreements")
	}

	var r0 []model.Aggrement
	if rf, ok := ret.Get(0).(func() []model.Aggrement); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Aggrement)
		}
	}

	return r0
}

// GetLoanByLoanID provides a mock function with given fields: loanID
func (_m *IHelper) GetLoanByLoanID(loanID int64) model.Loan {
	ret := _m.Called(loanID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanByLoanID")
	}

	var r0 model.Loan
	if rf, ok := ret.Get(0).(func(int64) model.Loan); ok {
		r0 = rf(loanID)
	} else {
		r0 = ret.Get(0).(model.Loan)
	}

	return r0
}

// GetLoans provides a mock function with given fields:
func (_m *IHelper) GetLoans() []model.Loan {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLoans")
	}

	var r0 []model.Loan
	if rf, ok := ret.Get(0).(func() []model.Loan); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Loan)
		}
	}

	return r0
}

// GetUserByUserID provides a mock function with given fields: userID
func (_m *IHelper) GetUserByUserID(userID int64) model.User {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUserID")
	}

	var r0 model.User
	if rf, ok := ret.Get(0).(func(int64) model.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	return r0
}

// GetUsers provides a mock function with given fields:
func (_m *IHelper) GetUsers() []model.User {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []model.User
	if rf, ok := ret.Get(0).(func() []model.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	return r0
}

// InitUsers provides a mock function with given fields:
func (_m *IHelper) InitUsers() {
	_m.Called()
}

// UpsertAgreement provides a mock function with given fields: agreement
func (_m *IHelper) UpsertAgreement(agreement model.Aggrement) {
	_m.Called(agreement)
}

// UpsertLoan provides a mock function with given fields: loan
func (_m *IHelper) UpsertLoan(loan model.Loan) {
	_m.Called(loan)
}

// NewIHelper creates a new instance of IHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *IHelper {
	mock := &IHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
